#include <iostream>
using namespace std;
#include <queue>
#include <tuple>

int k;
int n, m;
int arr[201][201];
bool check[201][201][31] = { false };

int dx[] = { -1,1,0,0,-1,-2,-2,-1,1,2,2,1 };
int dy[] = { 0,0,-1,1,-2,-1,1,2,2,1,-1,-2 };

int result = 987654321;

void bfs()
{
	queue<tuple<int, int, int,int>> q;
	q.push(make_tuple(0, 0, 0, 0));
	check[0][0][0] = true;

	while (!q.empty())
	{
		int cx = get<0>(q.front());
		int cy = get<1>(q.front());
		int ccost = get<2>(q.front());
		int block = get<3>(q.front());
		q.pop();

		//cout << cx << " " << cy << " " << ccost << " " << block << "\n";

		if (cx == n - 1 && cy == m - 1)
		{
			result = min(ccost, result);
			return;
		}

		for (int i = 0; i < 12; i++)
		{
			int nx = cx + dx[i];
			int ny = cy + dy[i];

			if (nx < 0 || nx >= n || ny < 0 || ny >= m)
				continue;

			if (i == 0 || i == 1 || i == 2 || i == 3)
			{
				if (arr[nx][ny] != 1 && !check[nx][ny][block])
				{
					q.push(make_tuple(nx, ny, ccost + 1, block));
					check[nx][ny][block] = true;
				}
			}
			else if (i == 4 || i == 5 || i == 6 || i == 7 || i == 8 || i == 9 || i == 10 || i == 11)
			{
				if (block < k && arr[nx][ny] != 1)
				{
					if (!check[nx][ny][block + 1])
					{
						q.push(make_tuple(nx, ny, ccost + 1, block + 1));
						check[nx][ny][block + 1] = true;
					}
				}
			}
		}
	}
}

int main(void)
{
	ios_base::sync_with_stdio(false);
	cin.tie(NULL);

	cin >> k >> m >> n;

	for (int i = 0; i < n; i++)
	{
		for (int j = 0; j < m; j++)
			cin >> arr[i][j];
	}

	bfs();

	if (result == 987654321)
		cout << -1;
	else
		cout << result;

	return 0;
}
